[{"D:\\TODO_new\\frontend\\src\\index.js":"1","D:\\TODO_new\\frontend\\src\\App.js":"2","D:\\TODO_new\\frontend\\src\\store\\index.js":"3","D:\\TODO_new\\frontend\\src\\components\\home\\home.js":"4","D:\\TODO_new\\frontend\\src\\components\\navbar\\navbar.js":"5","D:\\TODO_new\\frontend\\src\\components\\signup\\signup.js":"6","D:\\TODO_new\\frontend\\src\\components\\todo\\todo.jsx":"7","D:\\TODO_new\\frontend\\src\\components\\signup\\signin.jsx":"8","D:\\TODO_new\\frontend\\src\\components\\signup\\heading.jsx":"9","D:\\TODO_new\\frontend\\src\\components\\todo\\todocards.jsx":"10","D:\\TODO_new\\frontend\\src\\components\\todo\\update.jsx":"11"},{"size":388,"mtime":1706717385414,"results":"12","hashOfConfig":"13"},{"size":1249,"mtime":1706717385410,"results":"14","hashOfConfig":"13"},{"size":432,"mtime":1706717385414,"results":"15","hashOfConfig":"13"},{"size":738,"mtime":1706717385412,"results":"16","hashOfConfig":"13"},{"size":2701,"mtime":1706717385412,"results":"17","hashOfConfig":"13"},{"size":2652,"mtime":1706721746616,"results":"18","hashOfConfig":"13"},{"size":5295,"mtime":1706717385412,"results":"19","hashOfConfig":"13"},{"size":2013,"mtime":1706717385412,"results":"20","hashOfConfig":"13"},{"size":240,"mtime":1706717385412,"results":"21","hashOfConfig":"13"},{"size":1032,"mtime":1706717385412,"results":"22","hashOfConfig":"13"},{"size":1366,"mtime":1706717385414,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"jgdwj8",{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},"D:\\TODO_new\\frontend\\src\\index.js",[],[],"D:\\TODO_new\\frontend\\src\\App.js",["61"],[],"import React,{useEffect} from 'react'\r\nimport Navbar from './components/navbar/navbar.js'\r\nimport Home from './components/home/home.js'\r\nimport Signup from './components/signup/signup.js'\r\nimport Signin from './components/signup/signin.jsx'\r\nimport Todo from './components/todo/todo.jsx'\r\nimport {BrowserRouter as Router,Routes,Route} from \"react-router-dom\";\r\n\r\nimport {useDispatch} from \"react-redux\"\r\nimport {authActions} from './store'\r\n\r\nconst App = () => {\r\n  const dispatch=useDispatch();\r\n  useEffect(()=>{\r\n    //refresh karne pe wo login hi rehega component and if iska use na kare to wo refresh karne pe logout ho jayega\r\n    //isliye ham check kar rahe h whether session storage m id h if h to login rakho refresh karne par\r\n    //component mount kar rahe\r\n    const id=sessionStorage.getItem(\"id\");\r\n    if(id){\r\n    dispatch(authActions.login())\r\n    }\r\n  },[])\r\n  return (\r\n    <div>\r\n    <Router>\r\n    <Navbar/>\r\n      <Routes>\r\n        <Route exact path=\"/\" element={<Home/>}/>\r\n        <Route exact path=\"/signin\" element={<Signin/>}/>\r\n        <Route exact path=\"/signup\" element={<Signup/>}/>\r\n        <Route exact path=\"/todo\" element={<Todo/>}/>\r\n      </Routes>\r\n    </Router>\r\n    \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","D:\\TODO_new\\frontend\\src\\store\\index.js",[],[],"D:\\TODO_new\\frontend\\src\\components\\home\\home.js",[],[],"D:\\TODO_new\\frontend\\src\\components\\navbar\\navbar.js",["62"],[],"import React from 'react';\r\nimport  \"./navbar.css\"\r\nimport {Link} from \"react-router-dom\"\r\nimport {useSelector} from \"react-redux\"\r\nimport {useDispatch} from \"react-redux\"\r\nimport {authActions} from '../../store'\r\n\r\nconst Navbar = () => {\r\n  const isLoggedIn=useSelector((state)=>state.isLoggedIn)\r\n  const dispatch=useDispatch();\r\n  const logout=()=>{\r\n    //logout karne pe session storage jo hogi use khaali karenge jo usme id h use remove kardenge\r\n    sessionStorage.clear(\"id\")\r\n    //ye user ki id h\r\n    //store se logout function jo reducers m h use call kar rahe h\r\n    dispatch(authActions.logout())\r\n  }\r\n  return (\r\n    <nav className=\"navbar navbar-expand-lg bg-light\">\r\n      <div className=\"container\">\r\n        <Link className=\"navbar-brand\" to=\"/\"><b>ToDo</b></Link>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav ms-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item mx-2\">\r\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n            </li>\r\n            <li className=\"nav-item mx-2\">\r\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/todo\">Todo</Link>\r\n            </li>\r\n            {!isLoggedIn && \r\n            <>\r\n            <div>\r\n            <li className=\"nav-item mx-2\">\r\n              <Link className=\"nav-link active \" aria-current=\"page\" to=\"/signup\">SignUp</Link>\r\n            </li>\r\n            </div>\r\n            <div>\r\n            <li className=\"nav-item mx-2\">\r\n              <Link className=\"nav-link active \" aria-current=\"page\" to=\"/signin\">Sign In</Link>\r\n            </li>\r\n            </div>\r\n            </>\r\n            }\r\n            {isLoggedIn &&\r\n            <div>\r\n            <li className=\"nav-item mx-2\" onClick={logout}>\r\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"#\" >Log Out</Link>\r\n            </li>\r\n            </div>}\r\n            \r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"#\">\r\n                <img  alt=\"user image\" className=\"img-fluid user-png\" src=\"https://w7.pngwing.com/pngs/178/595/png-transparent-user-profile-computer-icons-login-user-avatars-thumbnail.png\"/>\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","D:\\TODO_new\\frontend\\src\\components\\signup\\signup.js",[],[],"D:\\TODO_new\\frontend\\src\\components\\todo\\todo.jsx",["63"],[],"import React, { useState,useEffect } from 'react';\r\nimport './todo.css'\r\nimport Todocards from './todocards.jsx'\r\nimport Update from './update.jsx'\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport axios from \"axios\"\r\nlet id=sessionStorage.getItem(\"id\")\r\nlet toUpdateArray=[];\r\n\r\nconst Todo = () => {\r\n    const [Inputs, setInputs] = useState({ title: \"\", description: \"\" });\r\n   \r\n    const [Array, setArray] = useState([]);\r\n    const show=()=>{\r\n    document.getElementById(\"textarea\").style.display=\"block\";\r\n    };\r\n    const change=(e)=>{\r\n     const {name,value}=e.target;\r\n     //setInputs kar rahe h jo kuch input m pehle se h and jo new name and value m aaya h\r\n     setInputs({...Inputs,[name]:value})\r\n    };\r\n    const submit = async () => {\r\n      const randomQueryParam = Math.floor(Math.random() * 1000);\r\n      if (Inputs.title === \"\" || Inputs.description === \"\") {\r\n        toast.error(\"Title Or Description Can't Be Empty\");\r\n      } else {\r\n        if (id) {\r\n          await axios\r\n          .post(`${window.location.origin}/api/v2/addTodo?nocache=${randomQueryParam}`, {\r\n              title: Inputs.title,\r\n              description: Inputs.description,\r\n              id: id,\r\n            })\r\n            .then((response) => {\r\n              console.log(response);\r\n            });\r\n            \r\n          setInputs({ title: \"\", description: \"\" });\r\n          toast.success(\"Your Task Is Added\");\r\n         \r\n         \r\n        } else {\r\n          //jo array ke andar h wo and jo ab inputs m aaya h wo ek array m aa jayega jaise \r\n            //title :hi descrip:nonebar->0 index//array ke andar pehle se hoga ye let's suppose\r\n            //title:hey ,descrip:new input ->1 index //new input dono ab array m aise index 0 and 1 ke jaise store ho jayenge\r\n            \r\n          setArray([...Array, Inputs]);\r\n          setInputs({ title: \"\", description: \"\" });\r\n          toast.success(\"Your Task Is Added\");\r\n          toast.error(\"Your Task Is Not Saved ! Please SignUp\");\r\n        }\r\n      }\r\n    };\r\n    const del=async(Cardid)=>{\r\n        //child component se parent component se delete karaya\r\n        //child component todocontainer h and parent todo\r\n     if(id){\r\n      await axios.delete(`${window.location.origin}/api/v2/deleteTodo/${Cardid}`,{data:{id:id}}).then((response)=>{\r\n        toast.success(\"Your Task Is Deleted\");\r\n      })\r\n    }else{\r\n      toast.error(\"Please Sign Up first\");\r\n    }\r\n    }\r\n    const dis = (value) => {\r\n        document.getElementById(\"todo-update\").style.display = value;\r\n      };\r\n    const update=(value)=>{\r\n      toUpdateArray=Array[value]\r\n    }\r\n       useEffect(() => {\r\n        if (id) {\r\n          //jab bhi ham todo khole vo hame is userid ki jitni bhi todolist h wo hame get method ke through frontend pe fetch karwa de\r\n          const fetch = async () => {\r\n            await axios\r\n              .get(`${window.location.origin}/api/v2/getTodo/${id}`)\r\n              .then((response) => {\r\n                setArray(response.data.list);\r\n              });\r\n          };\r\n          fetch();\r\n        }\r\n      }, [submit]);//matlab jab bhi submit wala click ho add button ke through to hamara use Effect chal jaana chahiye isse jo newly abhi abhi add kiya h add button ke through vo bhi dikhega bina refresh kiye aise refresh karne pe hi mount hota h useEffect but ab jaise hi submit button click hoga use Effect chalega\r\n    \r\n      \r\n\r\n  return (\r\n    <>\r\n    <div className=\"todo \">\r\n    <ToastContainer/>\r\n        <div className=\"todo-main container d-flex justify-content-center align-items-center mt-5 flex-column\">\r\n        <div className=\"d-flex flex-column todo-inputs-div w-100 p-3 \">\r\n            <input type=\"text\" placeholder=\"Todo Task Title\" className=\"my-2 p-2 todo-inputs\"\r\n                onClick={show}\r\n                onChange={change}\r\n                \r\n                name=\"title\"\r\n                value={Inputs.title}\r\n            />\r\n            <textarea id=\"textarea\" type=\"text\" placeholder=\"Description\" className=\"my-2 p-2 todo-inputs\"\r\n                onChange={change}\r\n                name=\"description\"\r\n                value={Inputs.description}\r\n            />\r\n            </div>\r\n            <div className=\" w-lg-50 w-100 d-flex justify-content-end my-3\">\r\n            <button className=\"home-btn px-2 py-1\" onClick={submit}>Add</button>\r\n            \r\n      </div>  \r\n      </div>\r\n      <div className=\"todo-body\">\r\n        <div className=\"container-fluid\">\r\n        <div className=\"row \" >\r\n        {Array &&\r\n                Array.map((item, index) => (\r\n                  <div\r\n\r\n                    className=\"col-lg-3 col-11 mx-lg-5 mx-3 my-2\"\r\n                    key={index}\r\n                  >\r\n                    <Todocards title={item.title} description={item.description} id={item._id} delid={del}  display={dis} updateId={index} tobeUpdate={update}/>\r\n                  </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n        </div>\r\n      </div>\r\n       <div className=\"todo-update \" id=\"todo-update\">\r\n        <div className=\"container update\">\r\n       <Update display={dis} update={toUpdateArray} />\r\n       </div>\r\n       </div>\r\n \r\n  </>\r\n  )\r\n}\r\n\r\nexport default Todo","D:\\TODO_new\\frontend\\src\\components\\signup\\signin.jsx",[],[],"D:\\TODO_new\\frontend\\src\\components\\signup\\heading.jsx",[],[],"D:\\TODO_new\\frontend\\src\\components\\todo\\todocards.jsx",[],[],"D:\\TODO_new\\frontend\\src\\components\\todo\\update.jsx",["64"],[],"import React,{useState,useEffect} from 'react'\r\nimport axios from \"axios\"\r\nimport { ToastContainer, toast } from 'react-toastify';\r\n\r\nconst Update = ({display,update}) => {\r\nuseEffect(()=>{\r\nsetinput({\r\n  title:update.title,\r\n  description:update.description,\r\n})\r\n},[update])\r\n\r\n  const [input,setinput]=useState({title:\"\",description:\"\"})\r\n  const change=(e)=>{\r\n    const {name,value}=e.target\r\n    setinput({...input,[name]:value})\r\n  }\r\n\r\n  const submit=async()=>{\r\n    await axios\r\n    .put(`${window.location.origin}/api/v2/updateTodo/${update._id}`, input)\r\n    .then((response) => {\r\n      toast.success(response.data.message);\r\n    });\r\n\r\n  display(\"none\");\r\n  }\r\n  return (\r\n    <div className=\"p-5 d-flex justify-content-center align-items-start flex-column update \">\r\n    <h3>Update Your Task</h3>\r\n    <input type=\"text\"  className=\"todo-inputs my-4 w-100 p-3\" name=\"title\" value={input.title} onChange={change}/>\r\n    <textarea className=\"todo-inputs w-100 p-3\" name=\"description\" value={input.description} onChange={change}/>\r\n    <div>\r\n        <button className=\"btn btn-dark my-4\" onClick={submit}>\r\n          UPDATE\r\n        </button>\r\n        <button className=\"btn btn-danger my-4 mx-3\" onClick={() => {\r\n            display(\"none\");\r\n          }} >\r\n          Close\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Update",{"ruleId":"65","severity":1,"message":"66","line":22,"column":5,"nodeType":"67","endLine":22,"endColumn":7,"suggestions":"68"},{"ruleId":"69","severity":1,"message":"70","line":56,"column":17,"nodeType":"71","endLine":56,"endColumn":191},{"ruleId":"65","severity":1,"message":"72","line":23,"column":11,"nodeType":"73","endLine":54,"endColumn":6,"suggestions":"74"},{"ruleId":"75","severity":1,"message":"76","line":3,"column":10,"nodeType":"77","messageId":"78","endLine":3,"endColumn":24},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["79"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","The 'submit' function makes the dependencies of useEffect Hook (at line 84) change on every render. To fix this, wrap the definition of 'submit' in its own useCallback() Hook.","VariableDeclarator",["80"],"no-unused-vars","'ToastContainer' is defined but never used.","Identifier","unusedVar",{"desc":"81","fix":"82"},{"desc":"83","fix":"84"},"Update the dependencies array to be: [dispatch]",{"range":"85","text":"86"},"Wrap the definition of 'submit' in its own useCallback() Hook.",{"range":"87","text":"88"},[872,874],"[dispatch]",[805,2093],"useCallback(async () => {\r\n      const randomQueryParam = Math.floor(Math.random() * 1000);\r\n      if (Inputs.title === \"\" || Inputs.description === \"\") {\r\n        toast.error(\"Title Or Description Can't Be Empty\");\r\n      } else {\r\n        if (id) {\r\n          await axios\r\n          .post(`${window.location.origin}/api/v2/addTodo?nocache=${randomQueryParam}`, {\r\n              title: Inputs.title,\r\n              description: Inputs.description,\r\n              id: id,\r\n            })\r\n            .then((response) => {\r\n              console.log(response);\r\n            });\r\n            \r\n          setInputs({ title: \"\", description: \"\" });\r\n          toast.success(\"Your Task Is Added\");\r\n         \r\n         \r\n        } else {\r\n          //jo array ke andar h wo and jo ab inputs m aaya h wo ek array m aa jayega jaise \r\n            //title :hi descrip:nonebar->0 index//array ke andar pehle se hoga ye let's suppose\r\n            //title:hey ,descrip:new input ->1 index //new input dono ab array m aise index 0 and 1 ke jaise store ho jayenge\r\n            \r\n          setArray([...Array, Inputs]);\r\n          setInputs({ title: \"\", description: \"\" });\r\n          toast.success(\"Your Task Is Added\");\r\n          toast.error(\"Your Task Is Not Saved ! Please SignUp\");\r\n        }\r\n      }\r\n    })"]